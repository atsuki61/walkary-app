---
alwaysApply: true
---

# Django Walkary App Development Rules

## 言語設定

- 常に日本語で応答してください

## プロジェクト構造

- このプロジェクトは Django 歩数管理アプリ（Walkary）です
- メインアプリは `walkary/` ディレクトリにあります
- 設定ファイルは `testproject/` ディレクトリにあります

## 開発ガイドライン

- .env ファイルは適切にセキュリティ対策済みです
- Render.com でのデプロイ設定は render.yaml で管理されています
- 環境変数は本番環境で適切に設定されています

## セキュリティ要件（重要）

- **SECRET_KEY は絶対に環境変数から取得すること**
- **データベース接続情報をハードコードしないこと**
- **ALLOWED_HOSTS は本番環境で適切に制限すること**
- **パスワードや認証情報はソースコードに含めないこと**
- **CSRF トークンを適切に実装すること**

## コード品質基準

- **エラーハンドリングを必ず実装すること**
  - try-except 文で DoesNotExist 例外を適切に処理
  - ユーザーフレンドリーなエラーメッセージの提供
- **重複コードの排除**
  - URL 定義の重複チェック
  - 共通処理の関数化
- **データベース制約の適切な設定**
  - ユニーク制約やインデックスの追加
  - データ整合性の確保

## Django 固有のルール

- **View クラスでの適切な HTTP メソッド処理**
- **フォームバリデーションの強化**
- **モデルのメタクラス設定の活用**
- **管理画面の適切なカスタマイズ**
- **ミドルウェアの順序確認**

## テスト要件

- **新機能実装時は必ずテストコードを作成すること**
- **既存機能変更時は関連テストを更新すること**
- **セキュリティテストの実施**

## パフォーマンス最適化

- **データベースクエリの最適化**
  - select_related, prefetch_related の活用
  - N+1 クエリ問題の回避
- **静的ファイルの最適化**
- **キャッシュ戦略の検討**

# AI タスク実行プロセス（一般ガイドライン）

あなたは高度な問題解決能力を持つ AI アシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

まず、ユーザーから受け取った指示を確認します：
<指示>
{{instructions}}
</指示>

この指示を元に、以下のプロセスに従って作業を進めてください：

---

1. 指示の分析と計画
   <タスク分析>

   - 主要タスクを簡潔に要約すること。
   - 記載された技術スタックを確認し、その制約内での実装方法を検討すること。
     **※ 技術スタックに記載のバージョンは変更せず、必要があれば必ず承認を得てください。**
   - 重要要件・制約を特定すること。
   - 想定課題を列挙すること。
   - 実行ステップを細分化し、最適順に並べること。

   ### 重複実装の防止（事前チェック）

   実装前に以下の確認を行ってください：

   - 既存の類似機能の有無
   - 同名または類似名の関数やコンポーネント
   - 重複する API エンドポイント
   - 共通化可能な処理の特定

   ### セキュリティチェック（必須）

   - 機密情報の漏洩リスク確認
   - 認証・認可の適切な実装
   - 入力値検証の実装
   - SQL インジェクション対策

   この分析は以降の全プロセスの基盤。十分に詳細かつ網羅的に行うこと。
   </タスク分析>

---

2. タスクの実行
   - 特定したステップを一つずつ実行してください。
   - 各ステップ完了時に簡潔な進捗を記録すること。
   - **実装完了後は必ずビルドテストを実行し、エラーがあれば即座に修正すること。**
   - 実装時の留意点：
     - 適切なディレクトリ構造の遵守
     - 命名規則の一貫性維持
     - 共通処理の適切な配置
     - **ビルドエラーの事前防止**: 型安全性、構文チェック、依存関係の確認
     - **セキュリティ要件の遵守**

---

3. 品質管理と問題対応

   - 各タスクの結果を迅速に検証すること。
   - 不具合発生時の対応手順：
     a. 切り分けと原因特定（ログ / デバッグ情報の確認）
     b. 対策案の作成と実施
     c. 修正後の動作検証
     d. デバッグログの確認と分析

   - 検証結果の記録フォーマット：
     a. 検証項目と期待される結果
     b. 実際の結果と差異
     c. 必要な対応策（該当する場合）

4. 最終確認

   - 成果物を全体評価し、当初指示との整合を確認すること。
   - 実装機能に重複がないか最終点検すること。
   - **セキュリティ要件の最終チェック**

5. 結果報告
   以下のフォーマットで最終的な結果を報告してください：

   # 実行結果報告

   ## 概要

   [全体の要約を簡潔に記述]

   ## 実行ステップ

   1. [ステップ 1 の説明と結果]
   2. [ステップ 2 の説明と結果]
      ...

   ## 最終成果物

   [成果物の詳細や、該当する場合はリンクなど]

   ## セキュリティ対応

   - [実装したセキュリティ対策]
   - [確認したセキュリティ要件]

   ## 課題対応（該当する場合）

   - 発生した問題と対応内容
   - 今後の注意点

   ## 注意点・改善提案

   - [気づいた点や改善提案があれば記述]

## 重要な注意事項

- 不明点は 作業開始前 に必ず確認を取ること。
- 重要な判断はその都度報告し、承認を得ること。
- 予期せぬ問題は即時報告し、対応策を提案すること。
- **明示的な指示がない変更は行わないこと。** 変更が必要と思われる場合は提案・承認後に実施すること。
- **UI/UX（レイアウト / 色 / フォント / 間隔など）の変更は原則禁止。**必要時は理由と影響を示し、事前承認を得ること。
- **技術スタックのバージョン（API / フレームワーク / ライブラリ等）を勝手に変更しないこと。** 必要時は理由を明確化し、承認が下りるまで保留すること。
- **セキュリティ関連の変更は特に慎重に行い、必ず承認を得ること。**

- **コミットメッセージ運用**:

  - コードを変更した場合、会話の最後に日本語でコミットメッセージを 3 つ提案。可能な範囲で [Conventional Commits](mdc:https:/www.conventionalcommits.org) の形式にすること。（例: `feat: 新機能を追加`, `fix: バグを修正`, `docs: ドキュメントを更新`, `security: セキュリティ問題を修正`）

- **原則**: 1 コミット = 1 意図。テスト / ビルドが通る状態を保ち、不要変更は含めない。
